# -*- coding: utf-8 -*-
"""Putri Ayu Nisa Az-Zahra_Submission ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dRPiFJurG-KAn6VOI8pg2aqgvmtAJ0ac

Nama : Putri Ayu Nisa Az-Zahra

Email : puayyssii12@gmail.com

Domisili : Kota Surabaya, Jawa Timur
"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

import zipfile

# ekstraksi file zip
file_dir = '/tmp/rockpaperscissors.zip'
unzipped = zipfile.ZipFile(file_dir, 'r') # buka file dalam read mode
unzipped.extractall('/tmp') # extract semua file yg ada dalam direktori
unzipped.close() 

# membuat direktori train dan validation
base_dir = '/tmp/rockpaperscissors/rps-cv-images'
train_dir = base_dir
validation_dir = base_dir

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# proses augmentasi gambar pada setiap sampel di dataset 
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    validation_split=0.4,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    validation_split=0.4,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

# menyiapkan data latih dan validasi
train_generator = train_datagen.flow_from_directory(
        train_dir,  
        target_size=(100, 200),  
        batch_size=20,
        subset='training',
        class_mode='categorical')
 
validation_generator = test_datagen.flow_from_directory(
        validation_dir, 
        target_size=(100, 200), 
        batch_size=20, 
        subset='validation',
        class_mode='categorical')

# membangun model menggunakan model sequential
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(100, 200, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

# compile model
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

# melatih model
model.fit(
      train_generator,
      steps_per_epoch=25,  # berapa batch yang akan dieksekusi pada setiap epoch
      epochs=20, # tambahkan epochs jika akurasi model belum optimal
      validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
      validation_steps=5,  # berapa batch yang akan dieksekusi pada setiap epoch
      verbose=2)

# uji akurasi trainned model
# model.score(validation_generator)

# Commented out IPython magic to ensure Python compatibility.
# mencoba prediksi
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(100,200))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=10)  
  print(fn)
  print(classes[0][0])
  print(classes[0][1])
  print(classes[0][2])

  if classes[0][0] == 1:
   print('Hasil : Kertas')
  elif classes[0][1] == 1:
    print('Hasil : Batu')
  else:
   print('Hasil : Gunting')